#!/bin/sh
#
# builddeb 1.3~cshored1
# Copyright 2003 Wichert Akkerman <wichert@wiggy.net>
# Copyright 2019 Daniel Dickinson <cshored@thecshore.com>
#
# Simple script to generate a deb package for a Linux kernel.  Some care
# is take to try and get addition and remove of the kernel right, but
# it's not as complex as the official debian kernel packages.
# Additional complexity of what to do with a kernel after it is installed
# or removed can be added by other scripts and packages: they can install
# scripts in the /etc/kernel/{pre,post}{inst,rm}.d/ directories (or an
# alternative location specified in KDEB_HOOKDIR) that will be called
# on package install and removal.

set -e

create_package() {
	local pname="$1" pdir="$2"

	cp debian/copyright "$pdir/usr/share/doc/$pname/"
	cp debian/changelog "$pdir/usr/share/doc/$pname/changelog.Debian"
	gzip -9 "$pdir/usr/share/doc/$pname/changelog.Debian"

	unset KDEB_FAKEROOT
	export FAKEROOT
	if type fakeroot 2>/dev/null 1>/dev/null; then
		KDEB_FAKEROOT=fakeroot
	elif [ $(id) != "0" ]; then
		echo "Creating a Debian package require fakeroot or actual root.  Please install fakeroot."
		return false
	fi
	# We need to do all the fake root activities in the same fakeroot session, and we need fakeroot
	# to build packages as non-root.
	CC=arm-linux-gnueabi-gcc dpkg-architecture -a armel -c $KDEB_FAKEROOT sh -c "
		set -e

		# Fix ownership and permissions
		chown -R root:root '$pdir'
		chmod -R go-w '$pdir'

		# Create the package
		dpkg-gencontrol -isp -p'$pname' -P'$pdir'
		dpkg --build '$pdir' ..
	"
}

# Some variables and settings used throughout the script
version=${KERNELVERSION}${localver_file}${LOCALVERSION}
revision=$(cat .version)
if [ -n "$KDEB_PKGVERSION" ]; then
	packageversion=$KDEB_PKGVERSION
else
	packageversion=${version}${KDEB_EXTRAPKGVER:+~$KDEB_EXTRAPKGVER}-${revision}${localver_auto}
fi
tmpdir="$objtree/debian/tmp"
fwdir="$objtree/debian/fwtmp"
packagename=linux-image-$version
fwpackagename=linux-firmware-image

if [ "$ARCH" = "um" ] ; then
	packagename=user-mode-linux-$version
fi

# Setup the directory structure
rm -rf "$tmpdir" "$fwdir"
mkdir -p "$tmpdir/DEBIAN" "$tmpdir/lib" "$tmpdir/boot" "$tmpdir/usr/share/doc/$packagename"
mkdir -p "$fwdir/DEBIAN" "$fwdir/lib" "$fwdir/usr/share/doc/$fwpackagename"
if [ "$ARCH" = "um" ] ; then
	mkdir -p "$tmpdir/usr/lib/uml/modules/$version" "$tmpdir/usr/bin"
fi

# Build and install the kernel
if [ "$ARCH" = "um" ] ; then
	$MAKE linux
	cp System.map "$tmpdir/usr/lib/uml/modules/$version/System.map"
	cp .config "$tmpdir/usr/share/doc/$packagename/config"
	gzip "$tmpdir/usr/share/doc/$packagename/config"
	cp $KBUILD_IMAGE "$tmpdir/usr/bin/linux-$version"
else
	cp System.map "$tmpdir/boot/System.map-${KERNELRELEASE}"
	cp .config "$tmpdir/boot/config-${KERNELRELEASE}"
	# Not all arches include the boot path in KBUILD_IMAGE
	if ! cp $KBUILD_IMAGE "$tmpdir/boot/${KBUILD_IMAGE}-${KERNELRELEASE}"; then
		cp arch/$ARCH/boot/$KBUILD_IMAGE "$tmpdir/boot/${KBUILD_IMAGE}-${KERNELRELEASE}"
	fi
fi

if grep -q '^CONFIG_MODULES=y' ${objtree}/.config ; then
	INSTALL_MOD_PATH="$tmpdir" make -j KBUILD_SRC= modules_install
	if [ -s "${objtree}/pkg-backports-flags" ]; then INSTALL_MOD_PATH="$tmpdir" KERNELRELEASE= make $(cat "${objtree}/pkg-backports-flags") install; fi
	if [ "$ARCH" = "um" ] ; then
		mv "$tmpdir/lib/modules/$version"/* "$tmpdir/usr/lib/uml/modules/$version/"
		rmdir "$tmpdir/lib/modules/$version"
	fi
fi

# Install the maintainer scripts
# Note: hook scripts under /etc/kernel are also executed by official Debian
# kernel packages, as well as kernel packages built using make-kpkg
debhookdir=${KDEB_HOOKDIR:-/etc/kernel}
for script in postinst postrm preinst prerm ; do
	mkdir -p "$tmpdir$debhookdir/$script.d"
	cat <<EOF > "$tmpdir/DEBIAN/$script"
#!/bin/sh

move_old_out_of_way() {
	oldkversion=\${1%%~*}
	newpversion=\${2}

	RET=0
	# In case of old cruft (shouldn't be there)
	for kfile in ${KBUILD_IMAGE} System.map config; do
		if [ -e /boot/\$kfile-\${oldkversion}.\${newpversion} ]; then
			rm -f /boot/\$kfile-\${oldkversion}.\${newpversion} || RET=1
		fi
	done
	rm -rf /lib/modules/\${oldkversion}.\${newpversion} || RET=1
	if [ "\$RET" != "0" ]; then
		echo "WARNING: Failed to move pre-existing backups out of the way." 2>&1
	else
		# Move old kernel and modules out of the way
		for kfile in ${KBUILD_IMAGE} System.map config; do
			if [ -e /boot/\${kfile}-\${oldkversion} ]; then
				mv -f /boot/\${kfile}-\${oldkversion} /boot/\${kfile}-\${oldkversion}.\${newpversion} || RET=1
			fi
		done
		if [ -e /lib/modules/\${oldkversion} ]; then
			mv -f /lib/modules/\${oldkversion} /lib/modules/\${oldkversion}.\${newpversion} || RET=1
		fi
	fi
	if [ "\$RET" != "0" ]; then
		printf "WARNING: Failed to moved pre-existing files out of the way.\nUsing fallback." >&2
		exit 1
	fi

	return 0
}

remove_out_of_way() {
	oldkversion=\${1%%~*}
	newpversion=\${2}

	(
		set -e
		echo "
			/lib/modules/\${oldkversion}.\${newpversion}
			/boot/${KBUILD_IMAGE}-\${oldkversion}.\${newpversion}
			/boot/System.map-\${oldkversion}.\${newpversion}
			/boot/config-\${oldkversion}.\${newpversion}
		" | xargs rm -rf
	) || {
		printf "WARNING: Failed to remove backups of old versions of kernel." >&2
	}

	return 0
}

move_old_back_in_place() {
	# Run by old package (assuming it had this script during it's creation)
	newpversion="\$1"
	oldpversion="\$2"
	oldkversion="\${2%%~*}"

	RET=0
	# If backup exists
	if [ -d /lib/modules/\${oldkversion}.\${newpversion} ]; then
		# Sanity check - does the target already exist
		if [ -e /lib/modules/\${oldkversion} ]; then
			Sanity check - no old backup by the old package exists
			if [ ! -e /lib/modules/\${oldkversion}.\${oldpversion} ]; then
				mv -f /lib/modules/\${oldkversion} /lib/modules/\${oldkversion}.\${oldpversion} || RET=1
			else
				echo "DPKG ERROR: /lib/modules/\${oldkversion}.\${oldpversion} already exists" >&2
				RET=1
			fi
		fi
		mv -f /lib/modules/\${oldkversion}.\${newpversion} /lib/modules/\${oldkversion} || RET=1

	fi
	if [ "\$RET" != "0" ]; then
		printf "WARNING: Failed to move pre-existing files out of the way when doing\nbackup after failed action.  Falling back to\ndpkg native method. This will probably fail" 2>&1
	fi

	for kfile in ${KBUILD_IMAGE} System.map config; do
		if [ -r /boot/\${kfile}-\${oldkversion}.\${newpversion} ]; then
			# Sanity check - does the target already exist
			if [ -e /boot/\${kfile}-\${oldkversion}} ]; then
				Sanity check - no old backup by the old package exists
				if [ ! -e /boot/\${kfile}-\${oldkversion}.\${oldpversion} ]; then
					mv -f /boot/\${kfile}-\${oldkversion} /boot/\${kfile}-\${oldkversion}.\${oldpversion} || RET=1
				else
					echo "DPKG ERROR: /boot/\${kfile}-\${oldkversion}.\${oldpversion} already exists" >&2
					RET=1
				fi
			fi
			mv -f /boot/\${kfile}-\${oldkversion}.\${newpversion} /boot/\${kfile}-\${oldkversion} || RET=1
		fi
	done
	if [ "\$RET" != "0" ]; then
		printf "WARNING: Failed to move pre-existing files out of the way when doing\nbackup after failed action. Falling back to\ndpkg native method. This will probably fail" 2>&1
	fi

	# If there is no old modules directory things could be very bad
	if [ ! -d /lib/modules/\${oldkversion} ]; then
		echo "DPKG ERROR: No '\${oldkversion}' modules directory; system may not boot." >&2
		exit 1
	fi
	if [ ! -r /boot/${KBUILD_IMAGE}-\${oldkversion}  ]; then
		echo "DPKG ERROR: No '\${oldkversion}' kernel; system may not boot." >&2
		exit 1
	fi
	return 0
}

remove_depmod_files() {
	kversion="\${1}"

	# Remove depmod files from /lib/modules/kversion
	(
		set -e

		cd /lib/modules/\${kversion}
		echo "
			modules.alias
			modules.alias.bin
			modules.builtin.bin
			modules.dep
			modules.dep.bin
			modules.devname
			modules.softdep
			modules.symbols
			modules.symbols.bin
		" | xargs rm -f

		exit 0

	) || {
		echo "WARNING: Failed to remove generated module dependency files." >&2
	}

	return 0
}

case "$script" in
prerm)
	case "\$1" in
	upgrade | \\
	deconfigure | \\
	remove)
		remove_depmod_files "${KERNELRELEASE}" || exit 1
		if type update-initramfs >/dev/null 2>/dev/null; then
			update-initramfs -d -k ${KERNELRELEASE} || {
				echo "WARNING: Failed to remove old initramfs." >&2
			}
		fi
		;;
	failed-upgrade)
		krelease="\${1%%!*}"

		( cd /lib/modules/\${krelease} && depmod \${krelease} || exit 1 ) || {
			echo "ERROR: Calculating module dependencies failed; system may not boot!" >&2
			exit 1
		}
		if type update-initramfs 2>/dev/null >/dev/null; then
			update-initramfs -c -k \${krelease} || {
				echo "Failed to create initramfs for \${krelease} in prerm failed-upgrade" >&2
				exit 1
			}
		fi
		;;
	esac
	;;
postrm)
	case "\$1" in
	remove | \\
	purge )
		rm -f /boot/${KBUILD_IMAGE}-${KERNELRELEASE} || {
			echo "Failed to purge old kernel from /boot '${KBUILD_IMAGE}-${KERNELRELEASE}'"
		}
		;;
	upgrade)
		if [ -z "\$2" ]; then
			echo "DPKG ERROR: configure called without version" >&2
			exit 1
		fi

		if dpkg --compare-versions "\$2" ge "${packageversion}"; then
			# Do depmod
			krelease="\${2%%~*}"

			( cd /lib/modules/\${krelease} && depmod \${krelease} || exit 1 ) || {
				echo "ERROR: Calculating module dependencies failed; system may not boot!" >&2
				exit 1
			}
			if type update-initramfs 2>/dev/null >/dev/null; then
				update-initramfs -c -k \${krelease} || {
					echo "Failed to create initramfs for \${krelease} in postrm upgrade" >&2
					exit 1
				}
			fi

		else
			move_old_back_in_place "$packageversion" "\$2" || exit 1
		fi
		;;
	failed-upgrade)
		if dpkg --compare-versions "\$2" eq "${packageversion}"; then
			# depmod or initramfs failed; try again
			krelease="\${2%%~*}"

			( cd /lib/modules/\${krelease} && depmod \${krelease} || exit 1 ) || {
				echo "ERROR: Calculating module dependencies failed; system may not boot!" >&2
				exit 1
			}
			if type update-initramfs 2>/dev/null >/dev/null; then
				update-initramfs -d -k \${krelease} || {
					echo "Failed to delete initramfs for \${krelease} in postrm failed-upgrade" >&2
					exit 1
				}
				update-initramfs -c -k \${krelease} || {
					echo "Failed to create initramfs for \${krelease} in postrm failed-upgrade" >&2
					exit 1
				}
			fi
		fi
		;;
	abort-install)
		if [ -z "\$2" ]; then
			:
			# Nothing to do here; fresh install
		else
			if dpkg --compare-versions "\$2" le "${packageversion}"; then
				move_old_back_in_place "\$2" "${packageversion}" || exit 1
			else
				remove_out_of_way "\$2" "${packageversion}" || exit 1
			fi
		fi
		;;
	abort-upgrade)
		if dpkg --compare-versions "\$2" le "${packageversion}"; then
			move_old_back_in_place "${packageversion}" "\$2" || exit 1
		else
			remove_out_of_way "\$2" "${packageversion}" || exit 1
		fi
		;;
	esac
	;;
preinst)
	case "\$1" in
	install)
		if [ -z "\$2" ]; then
			:
			# Nothing to do here; fresh install
		else
			move_old_out_of_way "\$2" "${packageversion}" || exit 1
		fi
		;;
	upgrade)
		if [ -z "\$2" ]; then
			echo "DPKG ERROR: preinst upgrade called without old-version" >&2
			exit 1
		fi
		if dpkg --compare-versions "\$2" ge "${packageversion}"; then
			move_old_out_of_way "${packageversion}" "\$2" || exit 1
		else
			move_old_out_of_way "\$2" "${packageversion}" || exit 1
		fi
		;;
	abort-upgrade)
		if dpkg --compare-versions "\$2" ge "${packageversion}"; then
			# Clean up from failure
			remove_depmod_files "\${2%%~*}" || exit 1
			if type update-initramfs >/dev/null 2>/dev/null; then
				update-initramfs -d -k "\${2%%~*} " || {
					echo "Failed to delete initramfs for \${krelease} in postrm failed-upgrade" >&2
					exit 1
				}
			fi
		fi
		;;
	abort-remove)
		if [ -z "\$2" ]; then
			echo "DPKG ERROR: preinst abort-{upgrade,remove} called without {old-version,in-favour}" >&2
			exit 1
		fi
		if [ "\$2" != "in-favour" ]; then
			move_old_back_in_place "\$2" "$packageversion" || exit 1
		elif [ -n "\$4" ]; then
			move_old_back_in_place "\$4" "$packageversion" || exit 1
		else
			echo "DPKG ERROR: preinst abort-remove called without old-version" >&2
			exit 1
		fi
		;;
	esac
	;;
postinst)
	case "\$1" in
	configure)
		if dpkg --compare-versions "\$2" ge "${packageversion}"; then
			remove_out_of_way "${packageversion}" "\$2" || exit 1
		else
			krelease=${packageversion%%~*}
			if [ -e /boot/${KBUILD_IMAGE}-\${krelease} ]; then
				(
					set -e
					rm -f /boot/uzImage.bin.old
					mv -f /boot/uzImage.bin /boot/uzImage.bin.old
				) || {
					echo "ERROR: Failed to back up kernel." 2>&1
					exit 1
				}
				cp -f /boot/${KBUILD_IMAGE}-\${krelease} /boot/uzImage.bin || {
					echo "ERROR: Failed to copy new kernel to running kernel location.  System may not boot!" >&2
					exit 1
				}
			fi
			remove_out_of_way "\${2}" "${packageversion}" || exit 1
		fi
		;;
	abort-upgrade)
		if dpkg --compare-versions "\$2" ge "${packageversion}"; then
			krelease="${packageversion%%~*}"
			( cd /lib/modules/\${krelease} && depmod \${krelease} || exit 1 ) || {
				echo "ERROR: Calculating module dependencies failed; system may not boot!" >&2
				exit 1
			}
			if type update-initramfs 2>/dev/null >/dev/null; then
				update-initramfs -c -k \${krelease} || {
					echo "Failed to create initramfs for '\${krelease}' in postinst abort-upgrade" >&2
					exit 1
				}
			fi
		fi
		;;
	abort-remove | \
	abort-deconfigure )
		( cd /lib/modules && depmod -a ${KERNELRELEASE} || exit 1 ) || {
			echo "ERROR: Calculating module dependencies failed; system may not boot!" >&2
			exit 1
		}
		if type update-initramfs 2>/dev/null >/dev/null; then
			update-initramfs -c -k ${KERNELRELEASE} || {
				echo "Failed to create initramfs for '${KERNELRELEASE}' in postinst abort-{remove,deconfigure}" >&2
				exit 1
			}
		fi
		if [ -e /boot/${KBUILD_IMAGE}-${KERNELRELEASE} ]; then
			(
				set -e

				rm -f /boot/uzImage.bin.abort.old
				mv -f /boot/uzImage.bin /boot/uzImage.bin.abort.old
			) || {
				echo "ERROR: Failed to back up kernel." 2>&1
				exit 1
			}

			cp -f /boot/${KBUILD_IMAGE}-${KERNELRELEASE} /boot/uzImage.bin || {
				echo "ERROR: Failed to copy old kernel to running kernel location.  System may not boot!" >&2
				exit 1
			}
		fi
		;;
	esac
	;;
esac

# Pass maintainer script parameters to hook scripts
export DEB_MAINT_PARAMS="\$*"

test -d $debhookdir/$script.d && run-parts --arg="$version" $debhookdir/$script.d
exit 0
EOF
	chmod 755 "$tmpdir/DEBIAN/$script"
done

# Try to determine maintainer and email values
if [ -n "$DEBEMAIL" ]; then
       email=$DEBEMAIL
elif [ -n "$EMAIL" ]; then
       email=$EMAIL
else
       email=$(id -nu)@$(hostname -f)
fi
if [ -n "$DEBFULLNAME" ]; then
       name=$DEBFULLNAME
elif [ -n "$NAME" ]; then
       name=$NAME
else
       name="Anonymous"
fi
maintainer="$name <$email>"

# Generate a simple changelog template
cat <<EOF > debian/changelog
linux-upstream ($packageversion) unstable; urgency=low

  * Custom built Linux kernel.

 -- $maintainer  $(date -R)
EOF

# Generate copyright file
cat <<EOF > debian/copyright
This is a packaged upstream version of the Linux kernel.

The sources may be found at most Linux ftp sites, including:
ftp://ftp.kernel.org/pub/linux/kernel

Copyright: 1991 - 2009 Linus Torvalds and others.

The git repository for mainline kernel development is at:
git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux-2.6.git

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; version 2 dated June, 1991.

On Debian GNU/Linux systems, the complete text of the GNU General Public
License version 2 can be found in \`/usr/share/common-licenses/GPL-2'.
EOF

# Generate a control file
cat <<EOF > debian/control
Source: linux-upstream
Section: admin
Priority: optional
Maintainer: $maintainer
Standards-Version: 3.8.1
EOF

if [ "$ARCH" = "um" ]; then
	cat <<EOF >> debian/control

Package: $packagename
Provides: linux-image, linux-image-2.6, linux-modules-$version
Architecture: any
Description: User Mode Linux kernel, version $version
 User-mode Linux is a port of the Linux kernel to its own system call
 interface.  It provides a kind of virtual machine, which runs Linux
 as a user process under another Linux kernel.  This is useful for
 kernel development, sandboxes, jails, experimentation, and
 many other things.
 .
 This package contains the Linux kernel, modules and corresponding other
 files, version: $version.
EOF

else
	cat <<EOF >> debian/control

Package: $packagename
Provides: linux-image, linux-image-2.6, linux-modules-$version
Suggests: $fwpackagename
Architecture: any
Description: Linux kernel, version $version
 This package contains the Linux kernel, modules and corresponding other
 files, version: $version.
EOF

fi

# Do we have firmware? Move it out of the way and build it into a package.
if [ -e "$tmpdir/lib/firmware" ]; then
	mv "$tmpdir/lib/firmware" "$fwdir/lib/"

	cat <<EOF >> debian/control

Package: $fwpackagename
Architecture: all
Description: Linux kernel firmware, version $version
 This package contains firmware from the Linux kernel, version $version.
EOF

	create_package "$fwpackagename" "$fwdir"
fi

create_package "$packagename" "$tmpdir"

exit 0
